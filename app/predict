#!/usr/bin/env Rscript

## ---- Initialising libraries ----
library(tibble)
library(tidyr)
library(readr)
library(purrr)
library(dplyr)
library(stringr)
library(lubridate)
library(glue)
library(zeallot)
library(pROC)
library(forcats)
library(rjson)
library(caTools)
library(imputeTS)
options(dplyr.summarise.inform = FALSE)

## Script that holp helper functions
source('algorithm/0.common_funcs.R')


## Get the training data file
data   <-
  glue(
    '/opt/ml_vol/inputs/data/testing/binaryClassificationBaseMainInput/',
    list.files(path = "/opt/ml_vol/inputs/data/testing/binaryClassificationBaseMainInput")
  )



tester <- function(data_path)
{
  ## Load model and test data
  trained_model         <- read_rds('/opt/ml_vol/model/artifacts/model.rds')
  variables_to_encode   <- trained_model$variables_to_encode
  variables_numeric   <- trained_model$variables_numeric
  target_class          <- trained_model$target_class
  other_class           <- trained_model$other_class
  id_column             <- trained_model$id_column
  exp_vars              <- trained_model$exp_vars
  df_test             <- read_csv(data_path)
  names(df_test) = make.names(names(df_test),unique = TRUE)
  id <- df_test %>% select(id_column)
  
  df_test[variables_to_encode] <-
    sapply(df_test[variables_to_encode], as.character)
  df_test[variables_numeric]   <-
    sapply(df_test[variables_numeric], as.numeric)
  
  df_test_n <- df_test %>% select(variables_numeric) %>% na_mean(option = "mean")
  df_test_c <- df_test %>% select(variables_to_encode) %>%
    mutate(across(everything(), ~ replace_na(.x, calc_mode(.x))))
  
  df_test <- cbind(id,df_test_n,df_test_c)
  
  ## Encode categorical features with number of training encoding
  if (!is.null(trained_model$encodings)) {
    encodings_tmp <-
      trained_model$encodings %>%
      map(function(x) {
        if (is.data.frame(x)) {
          x[, 2, drop = TRUE] %>% set_names(x[, 1, drop = TRUE])
        } else {
          x
        }
      })
    for (catvar in variables_to_encode) {
      df_test[[catvar]] <-
        encodings_tmp[[catvar]][df_test[[catvar]] %>% as.character()]
    }
  }
  
  
  model <- trained_model$mdl
  
  ## Getting probability of each row for the target_class
  test_results <-
    tester_func(mdl = model,
                test_set = df_test,
                exp_vars)
  
  test_results <- test_results$test_predictions
  
  test_results <-
    test_results %>% 
    mutate(pred = as.numeric(as.character(pred)),
           x = 1-pred %>% as.numeric())
  
  names(test_results)[names(test_results) == 'pred'] <- get("target_class")
  names(test_results)[names(test_results) == 'x'] <- get("other_class")
  
  ## Saving ids with prediction
  predictions <- cbind(id, test_results)
  predictions %>% write.csv('/opt/ml_vol/outputs/testing_outputs/test_predictions.csv', row.names=FALSE)
}



tryCatch(               
  
  # Specifying expression
  expr = {                     
    tester(data)
  },
  # Specifying error message
  error = function(e){         
    write(e %>% as.character(),file="/opt/ml_vol/outputs/errors/test_failure.txt",append=FALSE)
  }
)
